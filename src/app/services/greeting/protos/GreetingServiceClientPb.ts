/**
 * @fileoverview gRPC-Web generated client stub for greeting
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.6.1
// source: greeting.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from 'grpc-web'

import * as greeting_pb from './greeting_pb' // proto import: "greeting.proto"

export class GreeterClient {
    client_: grpcWeb.AbstractClientBase
    hostname_: string
    credentials_: null | { [index: string]: string }
    options_: null | { [index: string]: any }

    constructor(hostname: string, credentials?: null | { [index: string]: string }, options?: null | { [index: string]: any }) {
        if (!options) options = {}
        if (!credentials) credentials = {}
        options['format'] = 'text'

        this.client_ = new grpcWeb.GrpcWebClientBase(options)
        this.hostname_ = hostname.replace(/\/+$/, '')
        this.credentials_ = credentials
        this.options_ = options
    }

    methodDescriptorGreet = new grpcWeb.MethodDescriptor(
        '/greeting.Greeter/Greet',
        grpcWeb.MethodType.UNARY,
        greeting_pb.HelloRequest,
        greeting_pb.HelloReply,
        (request: greeting_pb.HelloRequest) => {
            return request.serializeBinary()
        },
        greeting_pb.HelloReply.deserializeBinary
    )

    greet(request: greeting_pb.HelloRequest, metadata?: grpcWeb.Metadata | null): Promise<greeting_pb.HelloReply>

    greet(
        request: greeting_pb.HelloRequest,
        metadata: grpcWeb.Metadata | null,
        callback: (err: grpcWeb.RpcError, response: greeting_pb.HelloReply) => void
    ): grpcWeb.ClientReadableStream<greeting_pb.HelloReply>

    greet(
        request: greeting_pb.HelloRequest,
        metadata?: grpcWeb.Metadata | null,
        callback?: (err: grpcWeb.RpcError, response: greeting_pb.HelloReply) => void
    ) {
        if (callback !== undefined) {
            return this.client_.rpcCall(
                this.hostname_ + '/greeting.Greeter/Greet',
                request,
                metadata || {},
                this.methodDescriptorGreet,
                callback
            )
        }
        return this.client_.unaryCall(
            this.hostname_ + '/greeting.Greeter/Greet',
            request,
            metadata || {},
            this.methodDescriptorGreet
        )
    }

    methodDescriptorCreateGreeting = new grpcWeb.MethodDescriptor(
        '/greeting.Greeter/CreateGreeting',
        grpcWeb.MethodType.UNARY,
        greeting_pb.CreateGreetingRequest,
        greeting_pb.GreetingReply,
        (request: greeting_pb.CreateGreetingRequest) => {
            return request.serializeBinary()
        },
        greeting_pb.GreetingReply.deserializeBinary
    )

    createGreeting(
        request: greeting_pb.CreateGreetingRequest,
        metadata?: grpcWeb.Metadata | null
    ): Promise<greeting_pb.GreetingReply>

    createGreeting(
        request: greeting_pb.CreateGreetingRequest,
        metadata: grpcWeb.Metadata | null,
        callback: (err: grpcWeb.RpcError, response: greeting_pb.GreetingReply) => void
    ): grpcWeb.ClientReadableStream<greeting_pb.GreetingReply>

    createGreeting(
        request: greeting_pb.CreateGreetingRequest,
        metadata?: grpcWeb.Metadata | null,
        callback?: (err: grpcWeb.RpcError, response: greeting_pb.GreetingReply) => void
    ) {
        if (callback !== undefined) {
            return this.client_.rpcCall(
                this.hostname_ + '/greeting.Greeter/CreateGreeting',
                request,
                metadata || {},
                this.methodDescriptorCreateGreeting,
                callback
            )
        }
        return this.client_.unaryCall(
            this.hostname_ + '/greeting.Greeter/CreateGreeting',
            request,
            metadata || {},
            this.methodDescriptorCreateGreeting
        )
    }

    methodDescriptorReadGreetings = new grpcWeb.MethodDescriptor(
        '/greeting.Greeter/ReadGreetings',
        grpcWeb.MethodType.UNARY,
        greeting_pb.ReadGreetingsRequest,
        greeting_pb.ReadGreetingsReply,
        (request: greeting_pb.ReadGreetingsRequest) => {
            return request.serializeBinary()
        },
        greeting_pb.ReadGreetingsReply.deserializeBinary
    )

    readGreetings(
        request: greeting_pb.ReadGreetingsRequest,
        metadata?: grpcWeb.Metadata | null
    ): Promise<greeting_pb.ReadGreetingsReply>

    readGreetings(
        request: greeting_pb.ReadGreetingsRequest,
        metadata: grpcWeb.Metadata | null,
        callback: (err: grpcWeb.RpcError, response: greeting_pb.ReadGreetingsReply) => void
    ): grpcWeb.ClientReadableStream<greeting_pb.ReadGreetingsReply>

    readGreetings(
        request: greeting_pb.ReadGreetingsRequest,
        metadata?: grpcWeb.Metadata | null,
        callback?: (err: grpcWeb.RpcError, response: greeting_pb.ReadGreetingsReply) => void
    ) {
        if (callback !== undefined) {
            return this.client_.rpcCall(
                this.hostname_ + '/greeting.Greeter/ReadGreetings',
                request,
                metadata || {},
                this.methodDescriptorReadGreetings,
                callback
            )
        }
        return this.client_.unaryCall(
            this.hostname_ + '/greeting.Greeter/ReadGreetings',
            request,
            metadata || {},
            this.methodDescriptorReadGreetings
        )
    }

    methodDescriptorUpdateGreeting = new grpcWeb.MethodDescriptor(
        '/greeting.Greeter/UpdateGreeting',
        grpcWeb.MethodType.UNARY,
        greeting_pb.UpdateGreetingRequest,
        greeting_pb.GreetingReply,
        (request: greeting_pb.UpdateGreetingRequest) => {
            return request.serializeBinary()
        },
        greeting_pb.GreetingReply.deserializeBinary
    )

    updateGreeting(
        request: greeting_pb.UpdateGreetingRequest,
        metadata?: grpcWeb.Metadata | null
    ): Promise<greeting_pb.GreetingReply>

    updateGreeting(
        request: greeting_pb.UpdateGreetingRequest,
        metadata: grpcWeb.Metadata | null,
        callback: (err: grpcWeb.RpcError, response: greeting_pb.GreetingReply) => void
    ): grpcWeb.ClientReadableStream<greeting_pb.GreetingReply>

    updateGreeting(
        request: greeting_pb.UpdateGreetingRequest,
        metadata?: grpcWeb.Metadata | null,
        callback?: (err: grpcWeb.RpcError, response: greeting_pb.GreetingReply) => void
    ) {
        if (callback !== undefined) {
            return this.client_.rpcCall(
                this.hostname_ + '/greeting.Greeter/UpdateGreeting',
                request,
                metadata || {},
                this.methodDescriptorUpdateGreeting,
                callback
            )
        }
        return this.client_.unaryCall(
            this.hostname_ + '/greeting.Greeter/UpdateGreeting',
            request,
            metadata || {},
            this.methodDescriptorUpdateGreeting
        )
    }

    methodDescriptorDeleteGreeting = new grpcWeb.MethodDescriptor(
        '/greeting.Greeter/DeleteGreeting',
        grpcWeb.MethodType.UNARY,
        greeting_pb.DeleteGreetingRequest,
        greeting_pb.DeleteGreetingReply,
        (request: greeting_pb.DeleteGreetingRequest) => {
            return request.serializeBinary()
        },
        greeting_pb.DeleteGreetingReply.deserializeBinary
    )

    deleteGreeting(
        request: greeting_pb.DeleteGreetingRequest,
        metadata?: grpcWeb.Metadata | null
    ): Promise<greeting_pb.DeleteGreetingReply>

    deleteGreeting(
        request: greeting_pb.DeleteGreetingRequest,
        metadata: grpcWeb.Metadata | null,
        callback: (err: grpcWeb.RpcError, response: greeting_pb.DeleteGreetingReply) => void
    ): grpcWeb.ClientReadableStream<greeting_pb.DeleteGreetingReply>

    deleteGreeting(
        request: greeting_pb.DeleteGreetingRequest,
        metadata?: grpcWeb.Metadata | null,
        callback?: (err: grpcWeb.RpcError, response: greeting_pb.DeleteGreetingReply) => void
    ) {
        if (callback !== undefined) {
            return this.client_.rpcCall(
                this.hostname_ + '/greeting.Greeter/DeleteGreeting',
                request,
                metadata || {},
                this.methodDescriptorDeleteGreeting,
                callback
            )
        }
        return this.client_.unaryCall(
            this.hostname_ + '/greeting.Greeter/DeleteGreeting',
            request,
            metadata || {},
            this.methodDescriptorDeleteGreeting
        )
    }

    methodDescriptorGetGreetingById = new grpcWeb.MethodDescriptor(
        '/greeting.Greeter/GetGreetingById',
        grpcWeb.MethodType.UNARY,
        greeting_pb.GetGreetingByIdRequest,
        greeting_pb.GreetingReply,
        (request: greeting_pb.GetGreetingByIdRequest) => {
            return request.serializeBinary()
        },
        greeting_pb.GreetingReply.deserializeBinary
    )

    getGreetingById(
        request: greeting_pb.GetGreetingByIdRequest,
        metadata?: grpcWeb.Metadata | null
    ): Promise<greeting_pb.GreetingReply>

    getGreetingById(
        request: greeting_pb.GetGreetingByIdRequest,
        metadata: grpcWeb.Metadata | null,
        callback: (err: grpcWeb.RpcError, response: greeting_pb.GreetingReply) => void
    ): grpcWeb.ClientReadableStream<greeting_pb.GreetingReply>

    getGreetingById(
        request: greeting_pb.GetGreetingByIdRequest,
        metadata?: grpcWeb.Metadata | null,
        callback?: (err: grpcWeb.RpcError, response: greeting_pb.GreetingReply) => void
    ) {
        if (callback !== undefined) {
            return this.client_.rpcCall(
                this.hostname_ + '/greeting.Greeter/GetGreetingById',
                request,
                metadata || {},
                this.methodDescriptorGetGreetingById,
                callback
            )
        }
        return this.client_.unaryCall(
            this.hostname_ + '/greeting.Greeter/GetGreetingById',
            request,
            metadata || {},
            this.methodDescriptorGetGreetingById
        )
    }
}
